# Default values for levis_nginx.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: delaroth/my-kubernetes-app
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true # <--- THIS WAS THE SOURCE OF THE PREVIOUS ERROR IF INDENTED WRONGLY
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP # Changed to ClusterIP for Ingress to work
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80 # Important: Confirm your Nginx container listens on 80. If it truly listens on 4321, change this to 4321.

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  # IMPORTANT: Set this to the class name of your Ingress Controller
  # You previously indicated "nginx", so I'll set it here.
  # Use "alb" for AWS Load Balancer Controller
  className: "nginx" # <--- SET THIS TO "nginx" (or "alb" if you change your mind)
  annotations:
    # Add annotations specific to your Ingress Controller.
    # For Nginx Ingress Controller, a common one might be:
    # nginx.ingress.kubernetes.io/rewrite-target: /
    # If using AWS Load Balancer Controller (and 'className: alb'), uncomment these:
    # alb.ingress.kubernetes.io/scheme: internet-facing
    # alb.ingress.kubernetes.io/target-type: ip
    # For HTTPS/SSL with AWS ALB Controller and ACM:
    # alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    # alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:<REGION>:<ACCOUNT_ID>:certificate/<YOUR_ACM_CERT_ARN>
  hosts:
    # IMPORTANT: Configure your hosts. For initial testing, using a wildcard is easiest.
    # For a real domain, you'd replace "*" with your actual domain (e.g., "my-app.example.com").
    # Then you'd point your domain's CNAME record to the Ingress's external address.
    - host: "levi-dev-web.local" # <--- Changed for initial testing
      paths:
        - path: /
          pathType: Prefix # A common and flexible pathType
  tls: []
  # If you want to enable HTTPS (TLS), uncomment and configure this section.
  # You'll need a Kubernetes Secret (e.g., 'my-nginx-tls-secret')
  # in the 'levi' namespace, containing your SSL/TLS certificate and key.
  # Example:
  #  - secretName: my-nginx-tls-secret
  #    hosts:
  #      - your-domain.com # Must match the host configured above and certificate subject

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
