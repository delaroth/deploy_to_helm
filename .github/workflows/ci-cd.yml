name: CI/CD Pipeline to Kubernetes

# This workflow runs on pushes to the main branch
on:
  push:
    branches:
      - main # Adjust this to your main branch name if it's different (e.g., master)

# Define common environment variables for all jobs
env:
  DOCKER_REGISTRY: https://docker.io
  DOCKER_IMAGE_NAME: delaroth/my-new-kubernetes-app
  HELM_CHART_PATH: levis-nginx
  KUBERNETES_NAMESPACE: levi
  RELEASE_NAME: levi-website

jobs:
  # Job to build and push the Docker image
  build-and-push-docker:
    runs-on: ubuntu-latest # Specifies the runner environment

    # Outputs from this job that subsequent jobs might need
    outputs:
      image_tag: ${{ steps.set_image_tag.outputs.image_tag }}

    # Permissions needed for the actions used in this job
    permissions:
      contents: read # Required for actions/checkout
      # packages: write # Only needed if you push to GitHub Container Registry, good practice to include

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Clones your repository to the runner

      - name: Set Image Tag
        id: set_image_tag # Assign an ID to this step to reference its outputs
        run: |
          # Get the short Git commit hash
          GIT_COMMIT_SHORT=$(git rev-parse --short HEAD)
          # Combine GitHub's run number and short Git commit hash for the image tag
          # This mimics your Jenkins tag format (e.g., 25-0406c7c)
          IMAGE_TAG="${{ github.run_number }}-${GIT_COMMIT_SHORT}"
          echo "Calculated IMAGE_TAG: $IMAGE_TAG"
          # Make IMAGE_TAG available as an environment variable for subsequent steps in this job
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          # Make IMAGE_TAG available as an output of this job for subsequent jobs
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v3 # Uses the official Docker login action
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Accesses the GitHub secret
          password: ${{ secrets.DOCKER_PASSWORD }}   # Accesses the GitHub secret (your PAT)

      - name: Build and push Docker image
        uses: docker/build-push-action@v5 # Uses the official Docker build-push action
        with:
          context: . # Build context is the current directory (where your Dockerfile is)
          push: true # Instructs the action to push the image to Docker Hub
          tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_TAG }} # Uses the calculated image name and tag
          file: ./Dockerfile # Explicitly specifies the Dockerfile path

  # Job to deploy to Kubernetes using Helm
  deploy-to-kubernetes:
        runs-on: ubuntu-latest
        needs: build-and-push-docker
        permissions:
          contents: read

        steps:
          - name: Checkout repository (for Helm chart)
            uses: actions/checkout@v4

          - name: Setup Kubeconfig
            run: |
              echo "${{ secrets.KUBECONFIG_BASE64 }}" | base64 -d > /tmp/kubeconfig
              chmod 600 /tmp/kubeconfig
              echo "KUBECONFIG=/tmp/kubeconfig" >> $GITHUB_ENV

          - name: Install Helm
            uses: azure/setup-helm@v4
            with:
              version: '3.15.0' # Or a specific Helm v3.x version

          - name: Deploy to Kubernetes with Helm
            env:
              DEPLOY_IMAGE_TAG: ${{ needs.build-and-push-docker.outputs.image_tag }}
            run: |
              echo "Deploying with Helm to Kubernetes namespace: ${{ env.KUBERNETES_NAMESPACE }}"
              helm upgrade --install ${{ env.RELEASE_NAME }} ${{ env.HELM_CHART_PATH }} \
                --namespace ${{ env.KUBERNETES_NAMESPACE }} \
                --set image.repository=${{ env.DOCKER_IMAGE_NAME }} \
                --set image.tag=${{ env.DEPLOY_IMAGE_TAG }}
              echo "Helm deployment initiated. Check Kubernetes for rollout status."
